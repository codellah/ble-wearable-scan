#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#define COUNT_LOW 0
#define COUNT_HIGH 8888

#define TIMER_WIDTH 16

#include "esp32-hal-ledc.h" // from Motor script

const int PIN = 2; // BLE pin
const int CUTOFF = -50; // Looks at range to cutoff BLE scan
const byte led_gpio = 4; // pin for motor
int servo_pos = 4000;
int scanTime = 2; // In seconds
BLEScan* pBLEScan;

void setup() {
  Serial.begin(115200);
  Serial.println("Scanning...");
  pinMode(PIN, OUTPUT);

  BLEDevice::init("");
  ledcSetup(1, 50, TIMER_WIDTH);
  ledcAttachPin(led_gpio, 1);

  pBLEScan = BLEDevice::getScan(); //create new scan

  pBLEScan->setActiveScan(true); //active scan uses more power, but get results faster
  pBLEScan->setInterval(100);
  pBLEScan->setWindow(99);  // less or equal setInterval value

}

void loop() {

/*Activating Bluetooth search*/
  BLEScan *scan = BLEDevice::getScan();
  scan->setActiveScan(true);
  BLEScanResults results = scan->start(1);
  int best = CUTOFF;
  for (int i = 0; i < results.getCount(); i++) {
    BLEAdvertisedDevice device = results.getDevice(i);
    int rssi = device.getRSSI();
    if (rssi > best) {
      best = rssi;
    }
    Serial.print("Signal Strength: ");
    Serial.println(device.getRSSI());
  }

/*Activating the motor and LED light*/
  digitalWrite(PIN, best > CUTOFF ? HIGH : LOW);
  if (best > CUTOFF) {
    ledcWrite(1, 720); // Rotates motor when device is detected
    delay(250);
  }
else {
  ledcWrite(1, 0);
  delay(250);
}

/*Info for monitoring Blueooth devices*/
BLEScanResults foundDevices = pBLEScan->start(scanTime, false);
Serial.print("Devices found: ");
Serial.println(foundDevices.getCount());
Serial.println("Scan done!");
pBLEScan->clearResults();   // delete results fromBLEScan buffer to release memory
}
